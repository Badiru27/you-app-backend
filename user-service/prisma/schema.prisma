// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  userName  String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  Profile   Profile[]
  Room      Room[]
  UserRoom  UserRoom[]
}

model Profile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  displayName String?
  gender      Gender?
  birthday    DateTime?
  height      Float?
  weight      Float?
  imageUrl    String?
  interest    String[]
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Room {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  createdBy String     @db.ObjectId
  messages  Message[]
  user      User       @relation(fields: [createdBy], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  UserRoom  UserRoom[]
}

model UserRoom {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  roomId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  room      Room      @relation(fields: [roomId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Message {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  roomId    String    @db.ObjectId
  userId    String
  content   String
  room      Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
